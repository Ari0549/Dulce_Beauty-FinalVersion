"use strict";

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _jestAxe = require("jest-axe");

var _server = _interopRequireDefault(require("react-dom/server"));

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

expect.extend(_jestAxe.toHaveNoViolations);

var App = (_ref) => {
  var {
    onSubmit: _onSubmit
  } = _ref;
  return _react.default.createElement(_index.Form, {
    name: "testForm",
    onSubmit: e => {
      _onSubmit(e);
    }
  }, _react.default.createElement(_index.TextBox, {
    label: "My Label",
    name: "myTextBox"
  }), _react.default.createElement(_index.Checkbox, {
    label: "My Checkbox",
    value: "checkbox value",
    isChecked: false,
    name: "myCheckBox"
  }), _react.default.createElement(_index.Radio, {
    label: "My Radio",
    name: "myRadio",
    isChecked: false,
    value: "myRadio1"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Date",
    name: "myDate"
  }), _react.default.createElement(_index.Range, {
    label: "My Range",
    name: "myRange"
  }), _react.default.createElement(_index.Telephone, {
    label: "Telephone",
    name: "myTelephone"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime",
    name: "myDateTime"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Month",
    type: "month",
    name: "myMonth"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Week",
    type: "week",
    name: "myWeek"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime-local",
    name: "myDateTimeLocal"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Time",
    type: "time",
    name: "myTime"
  }), _react.default.createElement(_index.DropDown, {
    label: "My Drop Down",
    initialValue: "2",
    "data-testid": "dd1",
    name: "myDropDown"
  }, _react.default.createElement(_index.OptionGroup, {
    label: "First Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "1"
  }, "First"), _react.default.createElement(_index.Option, {
    initialValue: "2"
  }, "Second"), _react.default.createElement(_index.Option, {
    initialValue: "3",
    label: "Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Second Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "11"
  }, "Second First"), _react.default.createElement(_index.Option, {
    initialValue: "12"
  }, "Second Second"), _react.default.createElement(_index.Option, {
    initialValue: "13",
    label: "Second Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Third Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "21"
  }, "Third First"), _react.default.createElement(_index.Option, {
    initialValue: "22"
  }, "Third Second"), _react.default.createElement(_index.Option, {
    initialValue: "23",
    label: "Third Third"
  }))), _react.default.createElement(_index.Button, null, "Save"));
};

var SingleItem = (_ref2) => {
  var {
    onSubmit: _onSubmit2
  } = _ref2;
  return _react.default.createElement(_index.Form, {
    name: "testForm",
    onSubmit: e => {
      _onSubmit2(e);
    }
  }, _react.default.createElement(_index.TextBox, {
    label: "My Label",
    name: "myTextBox"
  }), _react.default.createElement(_index.Button, null, "Save"));
};

var ClearOnSubmit = (_ref3) => {
  var {
    onSubmit: _onSubmit3
  } = _ref3;
  var [mess, setMess] = (0, _react.useState)('');
  var ref = (0, _react.useRef)();
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", null, mess), _react.default.createElement(_index.Form, {
    ref: ref,
    name: "testForm",
    onSubmit: e => {
      _onSubmit3(e);

      setMess(e.myTextBox + ' set');
      ref.current.reset();
    }
  }, _react.default.createElement(_index.TextBox, {
    label: "My Label",
    name: "myTextBox"
  }), _react.default.createElement(_index.Button, null, "Save")));
};

describe('The form components as a form', () => {
  afterEach(_react2.cleanup);
  it('should render and change accordingly', () => {
    var CHANGED_TEXTBOX = 'Changed Value';
    var {
      container,
      getByLabelText,
      getByTestId,
      getByText
    } = (0, _react2.render)(_react.default.createElement(App, {
      onSubmit: e => {
        expect(e).toMatchSnapshot();
        expect(e.myTextBox).toBe(CHANGED_TEXTBOX);
        expect(e.myDropDown).toBe('22');
      }
    }));
    var textBox = getByLabelText('My Label');
    var dd = getByTestId('dd1');
    var button = getByText('Save');
    expect(container.firstChild).toMatchSnapshot();
    var dropDownValue = dd.value;
    expect(dropDownValue).toBe('2');

    _react2.fireEvent.change(textBox, {
      target: {
        value: CHANGED_TEXTBOX
      }
    });

    _react2.fireEvent.change(dd, {
      target: {
        value: '22'
      }
    });

    _react2.fireEvent.click(button);
  });
  it('should not have a11y violations',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var html = _server.default.renderToString(_react.default.createElement(App, {
      onSubmit: () => {}
    }));

    var results = yield (0, _jestAxe.axe)(html);
    expect(results).toHaveNoViolations();
  }));
  it('should render and Submit one single item', () => {
    var CHANGED_TEXTBOX = 'Changed Value';
    var {
      container,
      getByLabelText,
      getByText
    } = (0, _react2.render)(_react.default.createElement(SingleItem, {
      onSubmit: e => {
        expect(e).toMatchSnapshot();
        expect(e.myTextBox).toBe(CHANGED_TEXTBOX);
      }
    }));
    var textBox = getByLabelText('My Label');
    var button = getByText('Save');
    expect(container.firstChild).toMatchSnapshot();

    _react2.fireEvent.change(textBox, {
      target: {
        value: CHANGED_TEXTBOX
      }
    });

    _react2.fireEvent.keyPress(textBox, {
      key: 'Enter',
      code: 13
    });

    _react2.fireEvent.keyDown(textBox, {
      key: 'Enter',
      code: 13
    });

    _react2.fireEvent.keyUp(textBox, {
      key: 'Enter',
      code: 13
    });

    _react2.fireEvent.click(button);
  });
  it('should reset the form',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    var CHANGED_TEXTBOX = 'Changed Value To Reset';
    var {
      container,
      getByLabelText,
      getByText,
      findByText
    } = (0, _react2.render)(_react.default.createElement(ClearOnSubmit, {
      onSubmit: e => {
        expect(e).toMatchSnapshot();
        expect(e.myTextBox).toBe(CHANGED_TEXTBOX);
      }
    }));
    var textBox = getByLabelText('My Label');
    var button = getByText('Save');
    expect(container.firstChild).toMatchSnapshot();

    _react2.fireEvent.change(textBox, {
      target: {
        value: CHANGED_TEXTBOX
      }
    });

    _react2.fireEvent.click(button);

    yield findByText(/Changed Value To Reset set/);
    expect(textBox.value).toBe('');
  }));
});