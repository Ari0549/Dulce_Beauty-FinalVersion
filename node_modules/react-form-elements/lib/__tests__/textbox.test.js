"use strict";

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _react2 = require("@testing-library/react");

var _server = _interopRequireDefault(require("react-dom/server"));

var _textbox = _interopRequireDefault(require("../textbox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

expect.extend(_jestAxe.toHaveNoViolations);
describe('TextBox component', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('The Rendered HTML', () => {
    it('should have a label',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var {
        getByText,
        container
      } = (0, _react2.render)(_react.default.createElement(_textbox.default, {
        label: "My Label",
        initialValue: ""
      }));
      expect(container.firstChild).toMatchSnapshot();
      var label = getByText('My Label');
      expect(label.textContent).toBe('My Label');
    }));
    it('should not violate',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      var html = _server.default.renderToString(_react.default.createElement(_textbox.default, {
        label: "My Label",
        initialValue: ""
      }));

      var results = yield (0, _jestAxe.axe)(html);
      expect(results).toHaveNoViolations();
    }));
    it('should have a placeholder when passed', () => {
      var {
        getByText,
        container
      } = (0, _react2.render)(_react.default.createElement(_textbox.default, {
        label: "My Label",
        initialValue: "",
        placeholder: "textbox placeholder"
      }));
      expect(container.firstChild).toMatchSnapshot();
      var label = getByText('My Label');
      expect(label.textContent).toBe('My Label');
    });
    it('should have a no label when passed an empty string as label', () => {
      var {
        container
      } = (0, _react2.render)(_react.default.createElement(_textbox.default, {
        label: "",
        initialValue: "",
        placeholder: "textbox placeholder"
      }));
      expect(container.firstChild).toMatchSnapshot();
    });
  });
  describe('handling input', () => {
    it('should set a value when passed in', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_textbox.default, {
        label: "My Label",
        initialValue: "My Input Value"
      }));
      expect(container.firstChild).toMatchSnapshot();
      var input = getByLabelText('My Label');
      expect(input.value).toBe('My Input Value');
    });
    it('should update a value when changed', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_textbox.default, {
        label: "My Label",
        initialValue: "My Input Value"
      }));
      var input = getByLabelText('My Label');

      _react2.fireEvent.change(input, {
        target: {
          value: 'Updated Value'
        }
      });

      expect(input.value).toBe('Updated Value');
      expect(container.firstChild).toMatchSnapshot();
    });
  });
});