"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _ = require("../");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('TextBox component', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('The Rendered HTML', () => {
    it('should have a label', () => {
      var {
        getByText,
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_.TextArea, {
        label: "My Label"
      }));
      expect(container.firstChild).toMatchSnapshot();
      var label = getByText('My Label', {
        exact: false
      });
      var tArea = getByLabelText('My Label', {
        exact: false
      });
      expect(label.textContent).toBe('My Label');
      expect(tArea.value).toBe('');
    });
    it('should support children', () => {
      var {
        getByText,
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_.TextArea, {
        label: "My Label",
        initialValue: "This is my value"
      }));
      expect(container.firstChild).toMatchSnapshot();
      var label = getByText('My Label', {
        exact: false
      });
      var tArea = getByLabelText('My Label', {
        exact: false
      });
      expect(label.textContent).toContain('My Label');
      expect(tArea.value).toBe('This is my value');
    });
  });
  describe('handling input', () => {
    it('should set a value when passed in', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_.TextArea, {
        label: "My Label",
        initialValue: "My Input Value"
      }));
      expect(container.firstChild).toMatchSnapshot();
      var input = getByLabelText('My Label', {
        exact: false
      });
      expect(input.value).toBe('My Input Value');
    });
    it('should update a value when changed', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_.TextArea, {
        label: "My Label"
      }));
      var tArea = getByLabelText('My Label', {
        exact: false
      });

      _react2.fireEvent.change(tArea, {
        target: {
          value: 'Updated Value'
        }
      });

      expect(tArea.value).toBe('Updated Value');
      expect(container.firstChild).toMatchSnapshot();
    });
  });
});