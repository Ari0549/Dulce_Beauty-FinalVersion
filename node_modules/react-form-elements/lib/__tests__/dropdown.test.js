"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _ = require("../");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('DropDown component', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('The Rendered HTML', () => {
    it('should render the full tree', () => {
      var {
        container
      } = (0, _react2.render)(_react.default.createElement(_.DropDown, {
        label: "Drop Down",
        initialValue: "2"
      }, _react.default.createElement(_.OptionGroup, {
        label: "First Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "1"
      }, "First"), _react.default.createElement(_.Option, {
        initialValue: "2"
      }, "Second"), _react.default.createElement(_.Option, {
        initialValue: "3",
        label: "Third"
      })), _react.default.createElement(_.OptionGroup, {
        label: "Second Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "11"
      }, "Second First"), _react.default.createElement(_.Option, {
        initialValue: "12"
      }, "Second Second"), _react.default.createElement(_.Option, {
        initialValue: "13",
        label: "Second Third"
      })), _react.default.createElement(_.OptionGroup, {
        label: "Third Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "21"
      }, "Third First"), _react.default.createElement(_.Option, {
        initialValue: "22"
      }, "Third Second"), _react.default.createElement(_.Option, {
        initialValue: "23",
        label: "Third Third"
      }))));
      expect(container.firstChild).toMatchSnapshot();
    });
    it('should not need the OptionGroup', () => {
      var {
        container
      } = (0, _react2.render)(_react.default.createElement(_.DropDown, {
        label: "Drop Down",
        initialValue: "13"
      }, _react.default.createElement(_.Option, {
        initialValue: "1"
      }, "First"), _react.default.createElement(_.Option, {
        initialValue: "2"
      }, "Second"), _react.default.createElement(_.Option, {
        initialValue: "3",
        label: "Third"
      }), _react.default.createElement(_.Option, {
        initialValue: "11"
      }, "Second First"), _react.default.createElement(_.Option, {
        initialValue: "12"
      }, "Second Second"), _react.default.createElement(_.Option, {
        initialValue: "13",
        label: "Second Third"
      }), _react.default.createElement(_.Option, {
        initialValue: "21"
      }, "Third First"), _react.default.createElement(_.Option, {
        initialValue: "22"
      }, "Third Second"), _react.default.createElement(_.Option, {
        initialValue: "23",
        label: "Third Third"
      })));
      expect(container.firstChild).toMatchSnapshot();
    });
    it('should allow a mix of OptionGroups and Options', () => {
      var {
        container
      } = (0, _react2.render)(_react.default.createElement(_.DropDown, {
        label: "Drop Down",
        initialValue: "2",
        "data-testid": "dd1"
      }, _react.default.createElement(_.OptionGroup, {
        label: "First Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "1"
      }, "First"), _react.default.createElement(_.Option, {
        initialValue: "2"
      }, "Second"), _react.default.createElement(_.Option, {
        initialValue: "3",
        label: "Third"
      })), _react.default.createElement(_.OptionGroup, {
        label: "Second Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "11"
      }, "Second First"), _react.default.createElement(_.Option, {
        initialValue: "12"
      }, "Second Second"), _react.default.createElement(_.Option, {
        initialValue: "13",
        label: "Second Third"
      })), _react.default.createElement(_.Option, {
        initialValue: "21"
      }, "Third First"), _react.default.createElement(_.Option, {
        initialValue: "22"
      }, "Third Second"), _react.default.createElement(_.Option, {
        initialValue: "23",
        label: "Third Third"
      })));
      expect(container.firstChild).toMatchSnapshot();
    });
  });
  describe('handling change', () => {
    it('should set a value when passed in', () => {
      var {
        getByTestId
      } = (0, _react2.render)(_react.default.createElement(_.DropDown, {
        label: "Drop Down",
        initialValue: "2",
        "data-testid": "dd1"
      }, _react.default.createElement(_.OptionGroup, {
        label: "First Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "1"
      }, "First"), _react.default.createElement(_.Option, {
        initialValue: "2"
      }, "Second"), _react.default.createElement(_.Option, {
        initialValue: "3",
        label: "Third"
      })), _react.default.createElement(_.OptionGroup, {
        label: "Second Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "11"
      }, "Second First"), _react.default.createElement(_.Option, {
        initialValue: "12"
      }, "Second Second"), _react.default.createElement(_.Option, {
        initialValue: "13",
        label: "Second Third"
      })), _react.default.createElement(_.OptionGroup, {
        label: "Third Group"
      }, _react.default.createElement(_.Option, {
        initialValue: "21"
      }, "Third First"), _react.default.createElement(_.Option, {
        initialValue: "22"
      }, "Third Second"), _react.default.createElement(_.Option, {
        initialValue: "23",
        label: "Third Third"
      }))));
      var select = getByTestId('dd1');
      expect(select.value).toBe('2');

      _react2.fireEvent.change(select, {
        target: {
          value: '13'
        }
      });

      expect(select.value).toBe('13');
    });
    it('should set a value when passed in', () => {
      var {
        getByTestId
      } = (0, _react2.render)(_react.default.createElement(_.DropDown, {
        label: "Drop Down",
        initialValue: "13",
        "data-testid": "dd1"
      }, _react.default.createElement(_.Option, {
        initialValue: "1"
      }, "First"), _react.default.createElement(_.Option, {
        initialValue: "2"
      }, "Second"), _react.default.createElement(_.Option, {
        initialValue: "3",
        label: "Third"
      }), _react.default.createElement(_.Option, {
        initialValue: "11"
      }, "Second First"), _react.default.createElement(_.Option, {
        initialValue: "12"
      }, "Second Second"), _react.default.createElement(_.Option, {
        initialValue: "13",
        label: "Second Third"
      }), _react.default.createElement(_.Option, {
        initialValue: "21"
      }, "Third First"), _react.default.createElement(_.Option, {
        initialValue: "22"
      }, "Third Second"), _react.default.createElement(_.Option, {
        initialValue: "23",
        label: "Third Third"
      })));
      var select = getByTestId('dd1');
      expect(select.value).toBe('13');

      _react2.fireEvent.change(select, {
        target: {
          value: '1'
        }
      });

      expect(select.value).toBe('1');
    });
  });
});