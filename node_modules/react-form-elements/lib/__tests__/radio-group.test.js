"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _radioGroup = _interopRequireDefault(require("../radio-group"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Radio component', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('The Rendered HTML', () => {
    it('should have a label', () => {
      var {
        getByText,
        container
      } = (0, _react2.render)(_react.default.createElement(_radioGroup.default, {
        name: "mygroup",
        label: "The Radio",
        initialChecked: "first",
        options: [{
          value: 'first',
          label: 'First'
        }, {
          value: 'second',
          label: 'Second'
        }]
      }));
      expect(container.firstChild).toMatchSnapshot();
      var label = getByText('First');
      expect(label.textContent.trim()).toBe('First');
    });
  });
  describe('handling input', () => {
    it('should set a value when passed in', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_radioGroup.default, {
        name: "mygroup",
        label: "The Radio",
        initialChecked: "first",
        options: [{
          value: 'first',
          label: 'First'
        }, {
          value: 'second',
          label: 'Second'
        }]
      }));
      expect(container.firstChild).toMatchSnapshot();
      var input = getByLabelText('First');
      expect(input.checked).toBe(true);
    });
    it('should update a value when changed in', () => {
      var {
        getByLabelText,
        container
      } = (0, _react2.render)(_react.default.createElement(_radioGroup.default, {
        name: "mygroup",
        label: "The Radio",
        initialChecked: "first",
        options: [{
          value: 'first',
          label: 'First'
        }, {
          value: 'second',
          label: 'Second'
        }]
      }));
      expect(container.firstChild).toMatchSnapshot();
      var hidden = container.querySelector('input[type="hidden"]');
      expect(hidden.value).toBe('first'); // implementation detail, bad expect

      var input = getByLabelText('Second');
      expect(input.checked).toBe(false);

      _react2.fireEvent.click(input);

      expect(input.value).toBe('second');
      expect(input.checked).toBe(true);
      expect(hidden.value).toBe('second'); // implementation detail, bad expect
    });
  });
});