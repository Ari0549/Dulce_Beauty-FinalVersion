"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _children = require("../utils/children");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Fieldset Component.
 *
 */
var Fieldset = (0, _react.forwardRef)((_ref, ref) => {
  var {
    children,
    legend,
    name
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "legend", "name"]);

  var kids = Array.isArray(children) ? children : [children];
  var mapped = kids.map(_children.childMapper);
  var formElements = mapped.map(_children.formElementMapper);
  var inputRef = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, () => ({
    isFieldset: true,
    getValues: function getValues() {
      return formElements.reduce((accumulator, el) => {
        if (!el.name) {
          return accumulator;
        }

        accumulator[el.name] = el.ref.current.getValue ? el.ref.current.getValue() : el.ref.current.value;
        return accumulator;
      }, {});
    },
    getValue: function getValue() {
      return this.getValues();
    }
  }));
  return _react.default.createElement("fieldset", _extends({}, props, {
    ref: inputRef
  }), _react.default.createElement("legend", null, legend), mapped);
});
Fieldset.displayName = 'ReactFormElements(Fieldset)';
var _default = Fieldset;
exports.default = _default;
Fieldset.propTypes = {
  name: _propTypes.default.string,
  legend: _propTypes.default.string
};
Fieldset.defaultProps = {
  name: 'Fieldset',
  legend: 'legend'
};