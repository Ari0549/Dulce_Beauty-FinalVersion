"use strict";

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _useFormElement = _interopRequireDefault(require("../utils/use-form-element"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

describe('useFormElement hook', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('handling input', () => {
    it('should set a value when passed in', () => {
      var val = 'My Input Value';
      var testId = 'test-hook-1';

      var TestInput = () => {
        var ref = (0, _react.createRef)();
        var {
          value,
          handleChange,
          inputRef
        } = (0, _useFormElement.default)(val, ref);
        return _react.default.createElement("input", {
          "data-testid": testId,
          name: "hookedInput",
          type: "text",
          value: value,
          onChange: handleChange,
          ref: inputRef
        });
      };

      var {
        getByTestId,
        container
      } = (0, _react2.render)(_react.default.createElement(TestInput, null));
      expect(container.firstChild).toMatchSnapshot();
      var input = getByTestId(testId);
      expect(input.value).toBe(val);
    });
    it('should update a value when changed', () => {
      var val = 'My Input Value';
      var testId = 'test-hook-2';

      var TestInput = () => {
        var ref = (0, _react.createRef)();
        var {
          id,
          value,
          handleChange,
          inputRef
        } = (0, _useFormElement.default)(val, ref);
        return _react.default.createElement("input", {
          "data-testid": testId,
          name: "hookedInput",
          type: "text",
          value: value,
          onChange: handleChange,
          ref: inputRef
        });
      };

      var {
        getByTestId,
        container
      } = (0, _react2.render)(_react.default.createElement(TestInput, null));
      var input = getByTestId(testId);

      _react2.fireEvent.change(input, {
        target: {
          value: 'Updated Value'
        }
      });

      expect(input.value).toBe('Updated Value');
      expect(container.firstChild).toMatchSnapshot();
    });
  });
});