"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class App extends _react.default.Component {
  constructor(props) {
    var references = {
      textBox: _react.default.createRef(),
      checkBox: _react.default.createRef(),
      range: _react.default.createRef(),
      date: _react.default.createRef(),
      telephone: _react.default.createRef(),
      dropdown: _react.default.createRef()
    };
    super(props);
    this.references = references;
  }

  getFormValues() {
    if (this.references.textBox.current === null) return {
      textBox: '',
      checkBox: '',
      range: '',
      date: '',
      telephone: '',
      dropdown: ''
    };
    return {
      textBox: this.references.textBox.current.getValue(),
      checkBox: this.references.checkBox.current.getValue(),
      range: this.references.range.current.getValue(),
      date: this.references.date.current.getValue(),
      telephone: this.references.telephone.current.getValue(),
      dropdown: this.references.dropdown.current.getValue()
    };
  }

  render() {
    var formValues = this.getFormValues();
    return _react.default.createElement("div", null, _react.default.createElement("h1", null, "React Form Elements"), _react.default.createElement("form", null, _react.default.createElement(_index.TextBox, {
      label: "My Label",
      ref: this.references.textBox
    }), _react.default.createElement(_index.Checkbox, {
      label: "My Checkbox",
      ref: this.references.checkBox,
      isChecked: true,
      value: "as-test-check"
    }), _react.default.createElement(_index.DateTime, {
      label: "My Date",
      ref: this.references.date
    }), _react.default.createElement(_index.Range, {
      label: "My Range",
      ref: this.references.range
    }), _react.default.createElement(_index.Telephone, {
      label: "Telephone",
      ref: this.references.telephone
    }), _react.default.createElement(_index.DateTime, {
      label: "My DateTime",
      type: "datetime"
    }), _react.default.createElement(_index.DateTime, {
      label: "My Month",
      type: "month"
    }), _react.default.createElement(_index.DateTime, {
      label: "My Week",
      type: "week"
    }), _react.default.createElement(_index.DateTime, {
      label: "My DateTime",
      type: "datetime-local"
    }), _react.default.createElement(_index.DateTime, {
      label: "My Time",
      type: "time"
    }), _react.default.createElement(_index.DropDown, {
      label: "My Drop Down",
      initialValue: "2",
      "data-testid": "dd1",
      ref: this.references.dropdown
    }, _react.default.createElement(_index.OptionGroup, {
      label: "First Group"
    }, _react.default.createElement(_index.Option, {
      initialValue: "1"
    }, "First"), _react.default.createElement(_index.Option, {
      initialValue: "2"
    }, "Second"), _react.default.createElement(_index.Option, {
      initialValue: "3",
      label: "Third"
    })), _react.default.createElement(_index.OptionGroup, {
      label: "Second Group"
    }, _react.default.createElement(_index.Option, {
      initialValue: "11"
    }, "Second First"), _react.default.createElement(_index.Option, {
      initialValue: "12"
    }, "Second Second"), _react.default.createElement(_index.Option, {
      initialValue: "13",
      label: "Second Third"
    })), _react.default.createElement(_index.OptionGroup, {
      label: "Third Group"
    }, _react.default.createElement(_index.Option, {
      initialValue: "21"
    }, "Third First"), _react.default.createElement(_index.Option, {
      initialValue: "22"
    }, "Third Second"), _react.default.createElement(_index.Option, {
      initialValue: "23",
      label: "Third Third"
    }))), _react.default.createElement("button", {
      onClick: e => {
        e.preventDefault();
      }
    }, "Check")), _react.default.createElement("div", {
      "data-testid": "ref-out"
    }, _react.default.createElement("ul", null, _react.default.createElement("li", {
      "data-testid": "textbox"
    }, "TextBox: ", formValues.textBox), _react.default.createElement("li", {
      "data-testid": "checkbox"
    }, "Checkbox: ", formValues.checkBox), _react.default.createElement("li", {
      "data-testid": "range"
    }, "Range: ", formValues.range), _react.default.createElement("li", {
      "data-testid": "date"
    }, "Date: ", formValues.date), _react.default.createElement("li", {
      "data-testid": "telephone"
    }, "Telephone: ", formValues.telephone))));
  }

}

describe('The form components as a form', () => {
  afterEach(_react2.cleanup);
  it('should render properly', () => {
    var {
      container,
      getByLabelText,
      getByTestId,
      rerender
    } = (0, _react2.render)(_react.default.createElement(App, null));
    var textBox = getByLabelText('My Label');
    var dd = getByTestId('dd1');
    expect(container.firstChild).toMatchSnapshot();
    var dropDownValue = dd.value;
    expect(dropDownValue).toBe('2');

    _react2.fireEvent.change(textBox, {
      target: {
        value: 'Changed Value'
      }
    });

    _react2.fireEvent.change(dd, {
      target: {
        value: '22'
      }
    });

    var changedDropDownValue = dd.value;
    expect(changedDropDownValue).toBe('22');
    rerender(_react.default.createElement(App, null));
    expect(container.firstChild).toMatchSnapshot();
  });
  it('should render properly c2', () => {
    var {
      container,
      getByLabelText,
      getByTestId,
      rerender
    } = (0, _react2.render)(_react.default.createElement(App, null));
    var textBox = getByLabelText('My Label');
    var dd = getByTestId('dd1');
    var dropDownValue = dd.value;
    expect(dropDownValue).toBe('2');

    _react2.fireEvent.change(textBox, {
      target: {
        value: 'Changed Value'
      }
    });

    _react2.fireEvent.change(dd, {
      target: {
        value: '22'
      }
    });

    var changedDropDownValue = dd.value;
    expect(changedDropDownValue).toBe('22');
    rerender(_react.default.createElement(App, null));
    expect(container.firstChild).toMatchSnapshot();
  });
});