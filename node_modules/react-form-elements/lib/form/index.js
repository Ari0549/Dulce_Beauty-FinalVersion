"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var childMapper = child => {
  var displayName = child.type ? child.type.displayName : false;
  if (!displayName && !child.ref) return child;
  return Object.assign({}, child, {
    ref: (0, _react.createRef)(),
    displayName: displayName
  });
};

var elementsMapper = (fEl, index) => {
  return {
    name: fEl.props ? fEl.props.name : "".concat(fEl.name, "-").concat(index),
    ref: fEl.ref,
    displayName: fEl.displayName
  };
};

var resetElements = fe => {
  if (fe.ref && fe.ref.current && fe.ref.current.reset) {
    fe.ref.current.reset();
  }
};

var defaultElements = e => e.value = '';
/**
 * Form Component.
 *
 */


var Form = (0, _react.forwardRef)((_ref, ref) => {
  var {
    name,
    onSubmit,
    children,
    className
  } = _ref;
  var mapped = Array.isArray(children) ? children.map(childMapper) : [Object.assign({}, children, {
    ref: (0, _react.createRef)(),
    displayName: children.type.displayName
  })];
  var formElements = mapped.map(elementsMapper);
  var formRef = (0, _react.useRef)();

  var formSubmission = e => {
    e.preventDefault();
    var values = {};

    if (formElements.length === 1) {
      values = formElements[0].ref.current.getValues() || formElements[0].ref.current.getValue();
    }

    formElements.forEach(el => {
      if (!el.name) {
        return;
      }

      if (!el.ref) {
        return;
      }

      if (el.ref && (el.ref.current.isFieldset || el.ref.current.isRow)) {
        Object.assign(values, el.ref.current.getValues());
      } else {
        values[el.name] = el.ref.current.getValue ? el.ref.current.getValue() : el.ref.current.value;
      }
    });
    e.preventDefault();

    var flattenObject = obj => {
      var flattened = {};
      Object.keys(obj).forEach(key => {
        if (typeof obj[key] === 'object' && obj[key] !== null) {
          Object.assign(flattened, flattenObject(obj[key]));
        } else {
          flattened[key] = obj[key];
        }
      });
      return flattened;
    };

    onSubmit(flattenObject(values));
  };

  (0, _react.useImperativeHandle)(ref, () => ({
    reset: () => {
      formRef.current.reset();
      var ins = formRef.current.querySelectorAll('input');
      formElements.forEach(resetElements);
      var elements = Array.from(ins);
      elements.forEach(defaultElements);
    },
    submit: () => {
      formSubmission({
        preventDefault: () => {}
      });
    }
  }));
  return _react.default.createElement("form", {
    ref: formRef,
    name: name,
    className: (0, _classnames.default)('rfe-form', className),
    onSubmit: formSubmission
  }, mapped);
});
Form.displayName = 'ReactFormElements(Form)';
Form.propTypes = {
  name: _propTypes.default.string.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  className: _propTypes.default.string
};
var _default = Form;
exports.default = _default;