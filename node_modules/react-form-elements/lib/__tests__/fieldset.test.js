"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var App = (_ref) => {
  var {
    onSubmit: _onSubmit
  } = _ref;
  return _react.default.createElement(_index.Form, {
    name: "testForm",
    onSubmit: e => {
      _onSubmit(e);
    }
  }, _react.default.createElement(_index.Fieldset, {
    legend: "My Form"
  }, _react.default.createElement(_index.TextBox, {
    label: "My Label",
    name: "myTextBox"
  }), _react.default.createElement(_index.CheckBox, {
    label: "My Checkbox",
    value: "checkbox value",
    isChecked: false,
    name: "myCheckBox"
  }), _react.default.createElement(_index.Radio, {
    label: "My Radio",
    name: "myRadio",
    isChecked: false,
    value: "myRadio1"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Date",
    name: "myDate"
  }), _react.default.createElement(_index.Range, {
    label: "My Range",
    name: "myRange"
  }), _react.default.createElement(_index.Telephone, {
    label: "Telephone",
    name: "myTelephone"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime",
    name: "myDateTime"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Month",
    type: "month",
    name: "myMonth"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Week",
    type: "week",
    name: "myWeek"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime-local",
    name: "myDateTimeLocal"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Time",
    type: "time",
    name: "myTime"
  }), _react.default.createElement(_index.DropDown, {
    label: "My Drop Down",
    initialValue: "2",
    "data-testid": "dd1",
    name: "myDropDown"
  }, _react.default.createElement(_index.OptionGroup, {
    label: "First Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "1"
  }, "First"), _react.default.createElement(_index.Option, {
    initialValue: "2"
  }, "Second"), _react.default.createElement(_index.Option, {
    initialValue: "3",
    label: "Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Second Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "11"
  }, "Second First"), _react.default.createElement(_index.Option, {
    initialValue: "12"
  }, "Second Second"), _react.default.createElement(_index.Option, {
    initialValue: "13",
    label: "Second Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Third Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "21"
  }, "Third First"), _react.default.createElement(_index.Option, {
    initialValue: "22"
  }, "Third Second"), _react.default.createElement(_index.Option, {
    initialValue: "23",
    label: "Third Third"
  }))), _react.default.createElement(_index.Button, null, "Save")));
};

var AppMulti = (_ref2) => {
  var {
    onSubmit: _onSubmit2
  } = _ref2;
  return _react.default.createElement(_index.Form, {
    name: "testForm",
    onSubmit: e => {
      _onSubmit2(e);
    }
  }, _react.default.createElement(_index.Fieldset, {
    legend: "My Form"
  }, _react.default.createElement(_index.TextBox, {
    label: "My Label",
    name: "myTextBox"
  }), _react.default.createElement(_index.CheckBox, {
    label: "My Checkbox",
    value: "checkbox value",
    isChecked: false,
    name: "myCheckBox"
  }), _react.default.createElement(_index.Radio, {
    label: "My Radio",
    name: "myRadio",
    isChecked: false,
    value: "myRadio1"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Date",
    name: "myDate"
  }), _react.default.createElement(_index.Range, {
    label: "My Range",
    name: "myRange"
  }), _react.default.createElement(_index.Telephone, {
    label: "Telephone",
    name: "myTelephone"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime",
    name: "myDateTime"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Month",
    type: "month",
    name: "myMonth"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Week",
    type: "week",
    name: "myWeek"
  }), _react.default.createElement(_index.DateTime, {
    label: "My DateTime",
    type: "datetime-local",
    name: "myDateTimeLocal"
  }), _react.default.createElement(_index.DateTime, {
    label: "My Time",
    type: "time",
    name: "myTime"
  })), _react.default.createElement(_index.Fieldset, {
    legend: "My Form part 2"
  }, _react.default.createElement(_index.DropDown, {
    label: "My Drop Down",
    initialValue: "2",
    "data-testid": "dd1",
    name: "myDropDown"
  }, _react.default.createElement(_index.OptionGroup, {
    label: "First Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "1"
  }, "First"), _react.default.createElement(_index.Option, {
    initialValue: "2"
  }, "Second"), _react.default.createElement(_index.Option, {
    initialValue: "3",
    label: "Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Second Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "11"
  }, "Second First"), _react.default.createElement(_index.Option, {
    initialValue: "12"
  }, "Second Second"), _react.default.createElement(_index.Option, {
    initialValue: "13",
    label: "Second Third"
  })), _react.default.createElement(_index.OptionGroup, {
    label: "Third Group"
  }, _react.default.createElement(_index.Option, {
    initialValue: "21"
  }, "Third First"), _react.default.createElement(_index.Option, {
    initialValue: "22"
  }, "Third Second"), _react.default.createElement(_index.Option, {
    initialValue: "23",
    label: "Third Third"
  }))), _react.default.createElement(_index.Button, null, "Save")));
};

describe('The form components as a form', () => {
  afterEach(_react2.cleanup);
  it('should render and change accordingly', () => {
    var CHANGED_TEXTBOX = 'Changed Value';
    var {
      container,
      getByLabelText,
      getByTestId,
      getByText
    } = (0, _react2.render)(_react.default.createElement(App, {
      onSubmit: e => {
        expect(e).toMatchSnapshot();
        expect(e.myTextBox).toBe(CHANGED_TEXTBOX);
        expect(e.myDropDown).toBe('22');
      }
    }));
    var textBox = getByLabelText('My Label');
    var dd = getByTestId('dd1');
    var button = getByText('Save');
    expect(container.firstChild).toMatchSnapshot();
    var dropDownValue = dd.value;
    expect(dropDownValue).toBe('2');

    _react2.fireEvent.change(textBox, {
      target: {
        value: CHANGED_TEXTBOX
      }
    });

    _react2.fireEvent.change(dd, {
      target: {
        value: '22'
      }
    });

    _react2.fireEvent.click(button);
  });
  it('should render the second', () => {
    var {
      container,
      getByText
    } = (0, _react2.render)(_react.default.createElement(AppMulti, {
      onSubmit: e => {
        expect(e).toMatchSnapshot();
      }
    }));
    var button = getByText('Save');
    expect(container.firstChild).toMatchSnapshot();

    _react2.fireEvent.click(button);
  });
});